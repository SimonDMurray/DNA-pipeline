#!/usr/bin/env nextflow

/*
Since this DNA pipeline was written there have been a few changes to syntax.
Below are the noted changes:
  `echo true` is now `debug true`
There are various ways to complete the same switch mechanism in `main.nf`, here are two examples of other ways you could do it.
There are 2 different examples of the same process below, the first uses the `multiMap` operator while the second uses implicit channel forking
Both do the same thing
Please note the below examples are still written using DSL1, to use DSL2 you need to utilise workflows which have a completely different structure.
*/

params.switch = false

//USING MULTIMAP

process A {

  debug true

  output:
  env(foo) into ch_foo

  shell:
  '''
  foo='foo'
  echo $foo
  '''
}

ch_foo.multiMap { it -> foo: bar: it }.set { ch_switch }

process B {
  
  debug true
  
  when:
  params.switch

  input:
  val(foo) from ch_switch.bar

  output:
  env(bar) into ch_B

  shell:
  '''
  bar=!{foo}'bar'
  echo !{foo}'bar'
  '''
}

ch_switch.foo.until{params.switch}.mix(ch_B).set{ch_cho}

process C {

  debug true

  input:
  val(either) from ch_cho

  shell:
  '''
  echo !{either}'cho'
  '''
}

//USING IMPLICIT FORKING

process A {

  debug true

  output:
  env(foo) into ch_foo

  shell:
  '''
  foo='foo'
  echo $foo
  '''
}

process B {
  
  debug true
  
  when:
  params.switch

  input:
  val(foo) from ch_foo

  output:
  env(bar) into ch_bar

  shell:
  '''
  bar=!{foo}'bar'
  echo !{foo}'bar'
  '''
}

ch_foo.until{params.switch}.mix(ch_bar).set{ch_cho}

process C {

  debug true

  input:
  val(either) from ch_cho

  shell:
  '''
  echo !{either}'cho'
  '''
}
